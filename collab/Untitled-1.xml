<?xml version="1.0"?>
<project
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
		xmlns="http://maven.apache.org/POM/4.0.0"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.amdocs.digital.ms.party.organization</groupId>
		<artifactId>party-organization-parent</artifactId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath>../party-organization-parent</relativePath>
	</parent>
	<artifactId>party-organization-export</artifactId>
	<name>party-organization-export</name>
	<url>http://maven.apache.org</url>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java-compat.version>11</java-compat.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<kafka-connect-couchbase.version>4.0.2</kafka-connect-couchbase.version>
		<export.init.container.base>${docker.pull.registry}/fnd-init-base:1.0.1</export.init.container.base>
		<export.init.container.image.name>${docker.image.name}-export</export.init.container.image.name>
		<codegen.language>amdocs-msb-async-business-message</codegen.language>
		<party-organization-notification-version>0.46.20</party-organization-notification-version>
		<party-organization-notification-classifier>v4.0</party-organization-notification-classifier>
		<core-config-yaml-file>core-party-organization-config.yaml</core-config-yaml-file>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>connect-json</artifactId>
			<scope>provided</scope>
		</dependency>		
		<dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-starter-security</artifactId>   
        	<scope>provided</scope> 
        	<exclusions>
				<exclusion>
					<groupId>org.springframework.security</groupId>
					<artifactId>spring-security-core</artifactId>
				</exclusion>
			</exclusions>      
    	</dependency>
    	<dependency>
    		<groupId>org.springframework.security</groupId>
    		<artifactId>spring-security-core</artifactId>
    		<version>5.4.5</version>
		</dependency>
		<dependency>
			<groupId>com.couchbase.client</groupId>
			<artifactId>kafka-connect-couchbase</artifactId>
			<version>${kafka-connect-couchbase.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>connect-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<scope>compile</scope>
		</dependency>
		<!--<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>5.2.8.RELEASE</version>
			<scope>compile</scope>
		</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.amdocs.msnext</groupId>
			<artifactId>security-jwt-api</artifactId>
		</dependency>
		<dependency>
			<groupId>com.amdocs.digital.ms.party.organization</groupId>
			<artifactId>party-organization-resources</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.amdocs.digital.ms.party.organization</groupId>
					<artifactId>external-client-kit</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.amdocs.msbase</groupId>
					<artifactId>msb-idempotency</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.amdocs.digital.ms.party.organization</groupId>
			<artifactId>party-organization-persistence</artifactId>
		</dependency>
<!-- 		<dependency> -->
<!-- 			<groupId>com.amdocs.digital.ms.party.organization</groupId> -->
<!-- 			<artifactId>party-organization-asyncmessages</artifactId> -->
<!-- 		</dependency> -->
<!-- 		<dependency>  -->
<!-- 			<groupId>com.amdocs.digital.ms.party.organization</groupId>  -->
<!-- 			<artifactId>party-organization-exe</artifactId>  -->
<!-- 		</dependency> -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<profiles>
		<profile>
			<id>regular</id>
			<activation>
				<property>
					<name>!pushRegistry</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>fabric8-maven-plugin</artifactId>
						<configuration>
							<!-- need to disable this to be able to test -->
							<buildStrategy>docker</buildStrategy>
							<mode>${fabric8-mode}</mode>
							<enricher>
								<excludes>
									<exclude>fmpexport-project</exclude>
								</excludes>
							</enricher>
							<verbose>true</verbose>
							<images>
                                <!--
								<image>
									<name>${docker.testing.registry}/${export.init.container.image.name}:${docker.image.release}
									</name>
									<build>
										<tags>
											<tag>${docker.image.tag}</tag>
										</tags>
										<from>
											${export.init.container.base}
										</from>
										<labels>
											<imageName>${export.init.container.image.name}</imageName>
											<imageVersion>${docker.image.release}</imageVersion>
										</labels>
										<assembly>
											<mode>dir</mode>
											<basedir>/</basedir>
											<inline>
												<id>add-party-organization-export-ms-files</id>
												<fileSets>
													<fileSet>
														<directory>${project.build.directory}/${project.name}-${project.version}-lib/lib</directory>
														<includes>
															<include>*.jar</include>
														</includes>
														<outputDirectory>deployable</outputDirectory>
													</fileSet>
												</fileSets>
											</inline>
										</assembly>
									</build>
								</image>
                                -->
							</images>
						</configuration>
						<executions>
							<execution>
								<id>fmpexport</id>
								<goals>
									<goal>resource</goal>
								</goals>
							</execution>
						</executions>
					</plugin>


				</plugins>
			</build>
		</profile>
		<profile>
			<id>deploy_files</id>
			<build>
				<plugins>
					<!-- Set new property variable docker.path.repository contains path 
						separation -->
                    <!--
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>regex-property</id>
								<goals>
									<goal>regex-property</goal>
								</goals>
								<configuration>
									<name>docker.path.repository</name>
									<value>${docker.testing.registry}</value>
									<regex>(.*)[\:](.*)</regex>
									<replacement>$1/$2</replacement>
								</configuration>
							</execution>
						</executions>
					</plugin>
                    -->
					<!-- Deploy tar file and pom.xml of current module -->
					<plugin>
						<artifactId>maven-deploy-plugin</artifactId>
						<executions>
							<execution>
								<id>deploy-file</id>
								<phase>deploy</phase>
								<goals>
									<goal>deploy-file</goal>
								</goals>
								<configuration>
									<file>
										target/docker/${docker.path.repository}/${export.init.container.image.name}/${project.version}/tmp/docker-build.tar
									</file>
									<pomFile>pom.xml</pomFile>
									<repositoryId>${project.distributionManagement.repository.id}
									</repositoryId>
									<url>${project.distributionManagement.repository.url}</url>
									<packaging>tar</packaging>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>repush</id>
			<activation>
				<property>
					<name>pushRegistry</name>
				</property>
			</activation>
			<build>
				<plugins>
                    <!--
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>fabric8-maven-plugin</artifactId>
						<configuration>
							<buildStrategy>docker</buildStrategy>
							<mode>kubernetes</mode>
							<verbose>true</verbose>
							<images>
								<image>
									<name>${pushRegistry}/${export.init.container.image.name}:${docker.image.release}
									</name>
									<build>
										<tags>
											<tag>${docker.image.tag}</tag>
										</tags>
										<from>${docker.testing.registry}/${export.init.container.image.name}:${docker.image.release}
										</from>
									</build>
								</image>
							</images>
						</configuration>
					</plugin>
                    -->
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-core-config-yaml</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/classes</outputDirectory>
							<resources>
								<resource>
									<directory>../party-organization-exe/src/main/resources</directory>
									<filtering>true</filtering>
									<includes>${core-config-yaml-file}</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-party-organization-notification</id>
						<phase>initialize</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.amdocs.digital.ms.party.subdomain</groupId>
									<artifactId>party-organization-notification</artifactId>
									<version>${party-organization-notification-version}</version>
									<classifier>${party-organization-notification-classifier}</classifier>
									<type>yaml</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}</outputDirectory>
									<destFileName>party-organization-notification.yaml</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.swagger</groupId>
				<artifactId>swagger-codegen-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>generate async business messages</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.build.directory}/party-organization-notification.yaml</inputSpec>
							<language>${codegen.language}</language>
							<generateApis>false</generateApis>
							<generateModels>true</generateModels>
							<configOptions>
								<dateLibrary>java8</dateLibrary>
								<sourceFolder>src/main/java</sourceFolder>
								<interfaceOnly>true</interfaceOnly>
							</configOptions>
							<modelPackage>com.amdocs.digital.ms.party.organization.resources.models</modelPackage>
						</configuration>
					</execution>
					<!--for any external business message definition simply copy yaml to 
						resources and add an execution for it here -->
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<descriptors>
						<descriptor>assembly.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>pre-unit-test-export</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${sonar.jacoco.reportPath}</destFile>
							<append>true</append>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-enforcer-plugin</artifactId>
		        <version>3.0.0-M3</version>
		        <executions>
		          <execution>
		            <id>enforce-banned-dependencies</id>
		            <goals>
		              <goal>enforce</goal>
		            </goals>
		            <configuration>
		              <rules>
		                <bannedDependencies>
		                  <excludes>
		                    <exclude>org.apache.maven</exclude>
		                    <exclude>org.apache.maven:badArtifact</exclude>
		                    <exclude>*:badArtifact</exclude>
		                  </excludes>
		                </bannedDependencies>
		              </rules>
		              <fail>true</fail>
		            </configuration>
		          </execution>
		        </executions>
		    </plugin>
		</plugins>
	</build>
</project>